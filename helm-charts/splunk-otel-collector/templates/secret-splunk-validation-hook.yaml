{{- if and (not .Values.secret.create) (.Values.secret.validateSecret) }}
# Helm hook that validates a custom secret provided by the user has all the required fields.
{{- $nameSuffix := "validate-secret" }}
{{- if .Values.serviceAccount.create }}
{{- $hookAnnotations := dict "helm.sh/hook" "pre-install,pre-upgrade" "helm.sh/hook-weight" "-1" "helm.sh/hook-delete-policy" "before-hook-creation,hook-succeeded" }}
{{- $customValues := dict "nameSuffix" (printf "-%s" $nameSuffix) "extraAnnotations" $hookAnnotations }}
{{- $common := dict "context" . "values" $customValues }}
{{- include "splunk-otel-collector.serviceAccountTemplate" $common | nindent 0 }}
---
{{- end }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ template "splunk-otel-collector.fullname" . }}-{{- $nameSuffix }}
  labels:
    {{- include "splunk-otel-collector.commonLabels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-upgrade,pre-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  {{- if .Values.serviceAccount.create }}
  # Use a shortly lived service account here since the normal service account may not exist yet.
  # See: https://helm.sh/docs/topics/charts_hooks/#hooks-and-the-release-lifecycle
  serviceAccountName: {{ template "splunk-otel-collector.serviceAccountName" . }}-{{- $nameSuffix }}
  {{- else }}
  # Use the service account provided by the user
  serviceAccountName: {{ template "splunk-otel-collector.serviceAccountName" . }}
  {{- end }}
  restartPolicy: Never
  containers:
  - name: {{ printf "%s" $nameSuffix }}
    image: {{ template "splunk-otel-collector.image.otelcol" . }}
    imagePullPolicy: {{ .Values.image.otelcol.pullPolicy }}
    command: ["sh", "-c"]
    args:
      - if [ "{{ include "splunk-otel-collector.splunkO11yEnabled" . }}" = "true" ] && [ ! -f /otel/secret/splunk_observability_access_token ]; then
          echo Splunk Observability destination is enabled, but custom\
          Kubernetes secret \"{{ template "splunk-otel-collector.secret" . }}\"\
          doesn\'t have required field \"splunk_observability_access_token\".;
          export TOKEN_INVALID=true;
        fi;
        if [ "{{ include "splunk-otel-collector.splunkPlatformEnabled" . }}" = "true" ] && [ ! -f /otel/secret/splunk_platform_hec_token ]; then
          echo Splunk Platform destination is enabled, but custom Kubernetes\
          secret \"{{ template "splunk-otel-collector.secret" . }}\" doesn\'t\
          have required field \"splunk_platform_hec_token\".;
          export TOKEN_INVALID=true;
        fi;
        if [ "$TOKEN_INVALID" = "true" ]; then
          echo Please update the secret.;
          exit 1;
        fi
    volumeMounts:
      - name: secret
        mountPath: /otel/secret
        readOnly: true
  volumes:
    - name: secret
      secret:
        secretName: {{ template "splunk-otel-collector.secret" . }}
{{- end }}
