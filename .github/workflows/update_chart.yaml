name: Check for new chart release

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  CHART_YAML: helm-charts/splunk-otel-collector/Chart.yaml
  REPO_URL: https://github.com/signalfx/splunk-otel-collector

jobs:
  auto_draft_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3
      - name: Update Chart Version
        id: update_chart_version
        run: |
          # Fetch the latest version from the GitHub repository
          LATEST_APP_TAG=$(curl -sL $REPO_URL/releases/latest | awk -F 'tag/' '{print $2}' | awk -F '"' '{print " " $1}')
          LATEST_APP_VER=$(curl -sL $REPO_URL/releases/latest | awk -F 'tag/' '{print $2}' | awk -F '"' '{print $1}' | awk '{print $NF}')

          # Retrieve the current version from Chart.yaml
          CURRENT_CHART_VERSION=$(yq eval '.version' $CHART_YAML)
          CURRENT_APP_VERSION=$(yq eval '.appVersion' $CHART_YAML)

          echo "Current version is $CURRENT_APP_VERSION, latest appVersion is $LATEST_APP_VER"

          # Split the current and latest app versions into three strings for validation
          IFS='.' read -ra CURRENT_VERSION <<< "$CURRENT_APP_VERSION"
          IFS='.' read -ra LATEST_VERSION <<< "$LATEST_APP_VER"

          # Check if a major or minor version update has occurred.
          # - We currently support creating releases for major or minor version updates.
          # - Incremental patch releases have to be made manually.
          # - TODO: Add support for patch releases by handling the version != appVersion case in Chart.yaml.
          if [[ "${LATEST_VERSION[0]}" -gt "${CURRENT_VERSION[0]}" || ("${LATEST_VERSION[0]}" -eq "${CURRENT_VERSION[0]}" && "${LATEST_VERSION[1]}" -gt "${CURRENT_VERSION[1]}") ]]; then
            echo "Updating appVersion in Chart.yaml"
            echo "NEED_UPDATE=1" >> $GITHUB_ENV
            # Update the version and appVersion separately with unique temporary files
            yq eval ".version = \"${LATEST_VERSION[0]}.${LATEST_VERSION[1]}.0\"" $CHART_YAML > temp_version.yaml && mv temp_version.yaml $CHART_YAML
            yq eval ".appVersion = \"$LATEST_APP_VER\"" $CHART_YAML > temp_appversion.yaml && mv temp_appversion.yaml $CHART_YAML
          else
            echo "No major or minor version update detected. Skipping the update."
          fi
      - name: PR the new version
        if: env.NEED_UPDATE == '1'
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: Update chart version
          title: Update chart version to ${{ steps.update_chart_version.outputs.LATEST_APP_VER }}
          body: |
            Update the appVersion in the Chart.yaml file to ${{ steps.update_chart_version.outputs.LATEST_APP_VER }}.
            This will reflect the latest version from the repository.
          branch: "update-chart-version-${{ steps.update_chart_version.outputs.LATEST_APP_VER }}"
          base: main
          draft: true
