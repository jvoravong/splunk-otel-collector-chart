name: Check for new instrumentation versions

on:
  schedule:
    # This cron job is scheduled to run at minute 45 past every 4th hour.
    - cron: "45 */4 * * *"
  workflow_dispatch:

env:
  CHART_YAML: helm-charts/splunk-otel-collector/chart.yaml
  VALUES_YAML: helm-charts/splunk-otel-collector/values.yaml
  LATEST_API: https://api.github.com/repos/signalfx/splunk-otel-{lang}/releases/latest

jobs:
  maybe_update:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - type: 'language'
            name: 'java'
            repo: 'ghcr.io/signalfx/splunk-otel-java/splunk-otel-java'
            api: 'https://api.github.com/repos/signalfx/splunk-otel-java/releases/latest'
            yamlPath: ${{ env.VALUES_YAML }}
          - type: 'chartDependency'
            name: 'opentelemetry-operator'
            repo: 'opentelemetry-operator'
            api: 'https://api.github.com/repos/open-telemetry/opentelemetry-operator/releases/latest'
            yamlPath: ${{ env.CHART_YAML }}
          - type: 'chartDependency'
            name: 'cert-manager'
            repo: 'cert-manager'
            api: 'github.com/cert-manager/cert-manager/releases/latest'
            yamlPath: ${{ env.CHART_YAML }}

    steps:
      - uses: actions/checkout@v3.5.3-
        name: swizzle version
        id: swizzle_version
        run: |
          REPO=${{ matrix.component.repo }}
          LOCAL_VER=$(grep $REPO ${{ matrix.component.yamlPath }} | awk -F: '{print $2}' | tr -d ' "')
          LATEST_VER=$(curl -qs -H "Accept: application/vnd.github+json" $(echo ${{ matrix.component.api }}) | jq -r .tag_name)
          echo "LATEST_VER=$LATEST_VER" >> $GITHUB_ENV
          echo "Current version of ${{ matrix.component.name }} is $LOCAL_VER, latest is $LATEST_VER"
          if [ "$LATEST_VER" == "$LOCAL_VER" ]; then
            echo We are already up to date. Nothing else to do.
          else
            echo 'Looks like we are good to update...'
            echo Updating to new version in ${{ matrix.component.yamlPath }}
            echo "NEED_UPDATE=1" >> $GITHUB_ENV
            VLINE=$(grep -n "${REPO}" ${{ matrix.component.yamlPath }} | cut -f1 -d:)
            echo "Line number for ${REPO} in ${{ matrix.component.yamlPath }} is: ${VLINE}"
            OLD_VER=$(sed -n "${VLINE}p" ${{ matrix.component.yamlPath }} | grep -oP 'v\K[0-9.]+')
            echo "Old version number is: ${OLD_VER}"
            NEW_VER=${LATEST_VER#v} # removes 'v' from the start of the string
            echo "New version number is: ${NEW_VER}"
            echo "sed: ${VLINE}s/${OLD_VER}/${NEW_VER}/"
            sed -i "${VLINE}s/${OLD_VER}/${NEW_VER}/" ${{ matrix.component.yamlPath }}
            echo "Current git diff:"
            git --no-pager diff
          fi

      - name: Render chart templates
        if: ${{ steps.swizzle_version.outputs.NEED_UPDATE == 1 }}
        run: |
          echo Making the templates
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt install -y apt-transport-https
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt update
          sudo apt install -y build-essential zip helm gh
          make render
          echo "Current git diff:"
          git --no-pager diff
      - name: PR the new version
        if: ${{ env.NEED_UPDATE == 1 }}
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: Update ${{ matrix.component.name }} version
          title: Update ${{ matrix.component.name }} version to ${{ env.LATEST_VER }}
          body: Use the new version of the ${{ matrix.component.name }}
          branch: "update-${{ matrix.component.name }}-${{ env.LATEST_VER }}"
          base: main
          delete-branch: true
          modify-outputs: false

