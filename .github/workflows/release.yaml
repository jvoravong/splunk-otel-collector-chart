name: Release Charts

on:
  push:
    branches:
      - main
    # Release only if the 'version' field in Chart.yaml was updated
    paths:
      - helm-charts/**/Chart.yaml

jobs:
  maybe_update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Chart.yaml Update
        id: check_update_chart
        run: |
          VERSION_DIFF=$(git diff HEAD^ -- "*Chart.yaml" | grep -E "^\+version:" || echo "")
          echo "VERSION_DIFF=$VERSION_DIFF"  # example value: +version: 0.80.1
          if [[ ! -z "$VERSION_DIFF" ]]; then
            echo "New release needed, creating..."
            echo "VALID_UPDATE=1" >> $GITHUB_OUTPUT
          else
            echo "No new release needed"
            echo "VALID_UPDATE=0" >> $GITHUB_OUTPUT
          fi
          exit 0

      - name: Configure Git
        run: git config user.name "$GITHUB_ACTOR" && git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        if: ${{ steps.check_update_chart.outputs.VALID_UPDATE == 1 }}

      - name: Install Helm
        uses: azure/setup-helm@v3.5
        with:
          version: v3.11.3
        if: ${{ steps.check_update_chart.outputs.VALID_UPDATE == 1 }}

      - name: Set up chart dependencies
        run: make render
        if: ${{ steps.check_update_chart.outputs.VALID_UPDATE == 1 }}

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: helm-charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        if: ${{ steps.check_update_chart.outputs.VALID_UPDATE == 1 }}

      - name: Generate Release Notes
        run: make chlog-release-notes OUTPUT=file
        if: ${{ steps.check_update_chart.outputs.VALID_UPDATE == 1 }}

      - name: Update Chart Release with Release Notes
        uses: actions/github-script@v7
        if: ${{ steps.check_update_chart.outputs.VALID_UPDATE == 1 }}
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('RELEASE.md', 'utf8');
            const version = '${{ steps.check_update_chart.outputs.VERSION }}';
            const tagName = 'v' + version; // Assuming tag names are prefixed with 'v'
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const release = releases.data.find(release => release.tag_name === tagName);
            if (release) {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                body: releaseNotes,
              });
              console.log(`Release notes updated for ${tagName}`);
            } else {
              console.log(`Release ${tagName} not found. No update made.`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
